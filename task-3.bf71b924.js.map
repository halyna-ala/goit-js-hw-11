{"version":3,"sources":["JS/task-3.js"],"names":["delay","ms","promise","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","callback","updatedUsers","map","user","all","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,IAKHC,OAJS,IAAIC,QAAQ,CAACC,EAASC,KAClCC,WAAW,KAAOF,EAAQH,IAAMA,MAMhCM,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDR,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,MAAMW,KAAKJ,GAMnB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,EAAUC,KACrCC,MAAAA,EAAeH,EAASI,IAAIC,GAChCA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,GAGxDlB,OAAAA,QAAQmB,IAAIH,IAUvBb,WAAW,KACPS,EAAgBH,EAAO,SAASD,KAAKF,QAAQc,QAC9C,KACHjB,WAAW,KACPS,EAAgBH,EAAO,QAAQD,KAAKF,QAAQc,QAC7C,KAKH,MAAMC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GACd,IAAI5B,QAAQ,CAACC,EAASC,KACnBL,MAAAA,EAAQwB,EAA0B,IAAK,KAE/ClB,WAAW,KACUqB,KAAKE,SAAW,GAGjCzB,EAAQ,CAAE4B,GAAID,EAAYC,GAAIxB,KAAMR,IAEpCK,EAAO0B,EAAYC,KAEpBhC,KAIHiC,EAAa,EAAGD,GAAAA,EAAIxB,KAAAA,MACxBC,QAAQC,oBAAoBsB,kBAAmBxB,QAG3C0B,EAAWF,IACfvB,QAAQ0B,sCAAsCH,+BAQhD1B,WAAW,KACHwB,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,IACrE,KACH5B,WAAW,KACHwB,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,IACrE","file":"task-3.bf71b924.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {resolve(ms)}, ms)\n    });\n    // Change this function\n    return promise\n  };\n  \n  const logger = time => console.log(`Fulfilled after ${time}ms`);\n  \n  // Tests\n  delay(2000).then(logger); // Fulfilled after 2000ms\n  delay(1000).then(logger); // Fulfilled after 1000ms\n  delay(1500).then(logger); // Fulfilled after 1500ms\n\n\n\n// task 3.2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, username, callback) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    );\n  \n    return Promise.all(updatedUsers)\n  };\n  \n//   // Currently the function works like this\n//   toggleUserState(users, 'Mango', console.table);\n//   toggleUserState(users, 'Ajax', console.table);\n  \n//   // The function should work like this\n//   toggleUserState(users, 'Mango').then(console.table);\n//   toggleUserState(users, 'Ajax').then(console.table);\nsetTimeout(() => {\n    toggleUserState(users, 'Mango').then(console.table);\n}, 3000)\nsetTimeout(() => {\n    toggleUserState(users, 'Ajax').then(console.table);\n}, 4000)\n\n\n// 3.3\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => {\n      return new Promise((resolve, reject) => {\n          const delay = randomIntegerFromInterval(200, 500);\n      \n        setTimeout(() => {\n          const canProcess = Math.random() > 0.3;\n      \n          if (canProcess) {\n            resolve({ id: transaction.id, time: delay });\n          } else {\n            reject(transaction.id);\n          }\n        }, delay);\n      })\n  };\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`✅Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`❌Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  // Currently the function works like this\n  // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n  // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n  \n  // The function should work like this\n  setTimeout(() => {\n          makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  }, 5000)\n  setTimeout(() => {\n          makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  }, 6000)"]}